#!/usr/bin/env node
const mongosee = require('../src/services/connection.database.service')
const app = require('../app')
const cronService = require('../src/services/cron.service')
const debug = require('debug')('status-services:server')
const http = require('http')
const normalizePort = (val) => {
    let port = parseInt(val, 10)

    if (isNaN(port)) {
        return val
    }

    if (port >= 0) {
        return port
    }

    return false
}
const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error
    }

    let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

mongosee.connectDb().then(async () => {
    server.listen(port, () =>
            console.log(`Example app listening on port ${port}!`),
    )
})

server.on('error', onError)
cronService.map(async (cron) => await cron.start())
